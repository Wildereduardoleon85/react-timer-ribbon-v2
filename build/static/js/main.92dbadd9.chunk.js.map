{"version":3,"sources":["TimerApp.js","index.js"],"names":["TimerApp","USER_ID_TIME_SESSION","useState","remainingTime","setRemainingTime","expirationTimeFromLocalStorage","JSON","parse","localStorage","getItem","now","Date","useEffect","expirationTime","setItem","stringify","interval","setInterval","removeItem","clearInterval","time","formattedMinutes","String","getMinutes","padStart","formattedSeconds","getSeconds","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAyDeA,MAtDf,WAIE,IAAMC,EAAuB,KAC7B,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAAiCC,KAAKC,MAC1CC,aAAaC,QAAQ,qBAGjBC,EAAMC,KAAKD,MAEjBE,qBAAU,WACR,IAAIC,EAECR,EAIHQ,EAAiBR,GAHjBQ,EAAiBH,EAAMT,EACvBO,aAAaM,QAAQ,mBAAoBR,KAAKS,UAAUF,KAK1D,IAAMG,EAAWC,aAAY,WAC3Bb,EAAiBS,EAAiBH,KACjC,KAWH,OANIP,EAAgB,GAAKA,EAAgBF,KACvCO,aAAaU,WAAW,oBACxBd,EAAiB,GACjBe,cAAcH,IAGT,kBAAMG,cAAcH,MAC1B,CAACb,EAAeE,IAMnB,IAAMe,EAAO,IAAIT,KAAKR,GAEhBkB,EAAmBC,OAAOF,EAAKG,cAAcC,SAAS,EAAG,KACzDC,EAAmBH,OAAOF,EAAKM,cAAcF,SAAS,EAAG,KAE/D,OACE,qBAAKG,UAAU,YAAf,SACE,iDAAkBN,EAAlB,YAAsCI,EAAtC,mDChDNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.92dbadd9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './TimerApp.css'\n\nfunction TimerApp() {\n  /**\n   * Duration in milliseconds of the custom catalog session\n   */\n  const USER_ID_TIME_SESSION = 36000000\n  const [remainingTime, setRemainingTime] = useState(0)\n  const expirationTimeFromLocalStorage = JSON.parse(\n    localStorage.getItem('sessionTimeStamp')\n  )\n\n  const now = Date.now()\n\n  useEffect(() => {\n    let expirationTime\n\n    if (!expirationTimeFromLocalStorage) {\n      expirationTime = now + USER_ID_TIME_SESSION\n      localStorage.setItem('sessionTimeStamp', JSON.stringify(expirationTime))\n    } else {\n      expirationTime = expirationTimeFromLocalStorage\n    }\n\n    const interval = setInterval(() => {\n      setRemainingTime(expirationTime - now)\n    }, 1000)\n\n    /**\n     * reset values once the timer has expired\n     */\n    if (remainingTime < 0 || remainingTime > USER_ID_TIME_SESSION) {\n      localStorage.removeItem('sessionTimeStamp')\n      setRemainingTime(0)\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [remainingTime, expirationTimeFromLocalStorage])\n\n  /**\n   * Transform milliseconds remaining time into date format to be able to extract the desired\n   * values, in this case; minutes and seconds\n   */\n  const time = new Date(remainingTime)\n\n  const formattedMinutes = String(time.getMinutes()).padStart(2, '0')\n  const formattedSeconds = String(time.getSeconds()).padStart(2, '0')\n\n  return (\n    <div className='container'>\n      <h1>{`Tienes 00:${formattedMinutes}:${formattedSeconds} para revisar tu cat√°logo personalizado`}</h1>\n    </div>\n  )\n}\n\nexport default TimerApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport TimerApp from './TimerApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}